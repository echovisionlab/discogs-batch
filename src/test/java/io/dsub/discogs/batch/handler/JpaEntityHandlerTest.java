package io.dsub.discogs.batch.handler;

import static org.assertj.core.api.Assertions.assertThat;

import io.dsub.discogs.common.entity.artist.Artist;
import java.lang.reflect.Field;
import java.time.LocalDate;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.junit.jupiter.api.Test;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

class JpaEntityHandlerTest {

  JpaEntityHandler jpaEntityExtractor = new JpaEntityHandler() {};

  @Test
  void whenGetTableName__ShouldReturnExactValue() {
    // given
    @Table(name = "test")
    class TestEntity {}

    // when
    String name = jpaEntityExtractor.getTableName(TestEntity.class);

    // then
    assertThat(name).isEqualTo(TestEntity.class.getAnnotation(Table.class).name());
  }

  @Test
  void whenIsIdAutoGenerated__ShouldReturnFalse() {
    // given
    class TestEntity {
      @Id @GeneratedValue @Column long id;
    }

    // when
    boolean result = jpaEntityExtractor.hasKnownId(TestEntity.class);

    // then
    assertThat(result).isFalse();
  }

  @Test
  void givenClassHasKnownId__ShouldReturnTrue() {
    // given
    class TestEntity {
      @Id @Column long id;
    }

    // when
    boolean result = jpaEntityExtractor.hasKnownId(TestEntity.class);

    // then
    assertThat(result).isTrue();
  }

  @Test
  void givenClassHasNoLastModifiedAtField__WhenGetLastModifiedAt__ShouldReturnNull() {
    // given
    class TestEntity {}

    // when
    Field field = jpaEntityExtractor.getLastModifiedField(TestEntity.class);

    // then
    assertThat(field).isNull();
  }

  @Test
  void whenGetLastModifiedAt__WithAnnotation__ShouldReturnField() {
    // given
    class TestEntity {
      @LastModifiedDate LocalDate lastModifiedAt;
    }

    // when
    Field lastModifiedField = jpaEntityExtractor.getLastModifiedField(Artist.class);

    // then
    assertThat(lastModifiedField).isNotNull();
    assertThat(lastModifiedField.isAnnotationPresent(LastModifiedDate.class)).isTrue();
  }

  @Test
  void givenClassHasNoCreatedAtField__WhenGetCreatedAt__ShouldReturnNull() {
    // given
    class TestEntity {}
    assertThat(jpaEntityExtractor.getCreatedAtField(TestEntity.class)).isNull();
  }

  @Test
  void givenClassHasCreatedAtField__WhenGetCreatedAt__ShouldReturnField() {
    // given
    class TestEntity {
      @CreatedDate LocalDate createdAt;
    }

    // when
    Field createdAt = jpaEntityExtractor.getCreatedAtField(Artist.class);

    // then
    assertThat(createdAt.isAnnotationPresent(CreatedDate.class)).isTrue();
    assertThat(createdAt).isNotNull();
  }

  @Test
  void givenClassHasUniqueConstraints__WhenHasUniqueConstraints__ShouldReturnTrue() {
    // given
    @Table(
        uniqueConstraints = {
          @UniqueConstraint(
              name = "my_constraint",
              columnNames = {"name", "title"})
        })
    class TestEntity {
      private String name;
      private String title;
    }

    // when
    boolean result = jpaEntityExtractor.hasUniqueConstraints(TestEntity.class);

    // then
    assertThat(result).isTrue();
  }

  @Test
  void givenClassHasNoUniqueConstraints__WhenHasUniqueConstraints__ShouldReturnFalse() {
    // given
    @Table
    class TestEntity {}

    // when
    boolean result = jpaEntityExtractor.hasUniqueConstraints(TestEntity.class);

    // then
    assertThat(result).isFalse();
  }

  @Test
  void givenClassHasNoTransientField__WhenGetMappedFields__ShouldContainParentFields() {

    // given
    class Parent {
      @Column private String parentField;
    }

    class Child extends Parent {
      @Column private String child;
    }

    // when
    List<Field> fields = jpaEntityExtractor.getMappedFields(Child.class);

    // then
    assertThat(fields).hasSize(2);
  }

  @Test
  void givenClassHasTransientField__WhenGetMappedFields__ShouldNotContainAnyTransientFields() {
    // given
    class TestEntity {
      @Column String myField;

      @Transient @Column String transientField;
    }

    // when
    List<Field> fields = jpaEntityExtractor.getMappedFields(TestEntity.class);

    // then
    assertThat(fields).noneMatch(field -> field.getName().equals("transientField"));
  }

  @Test
  void givenClassHasFieldWithoutAnnotation__WhenGetMappedField__ShouldNotReturnSuchField() {
    // given
    class TestEntity {
      String hello;
    }

    // when
    List<Field> fields = jpaEntityExtractor.getMappedFields(TestEntity.class);

    // then
    assertThat(fields).isEmpty();
  }

  @Test
  void givenClassHasIdField__WhenGetMappedFields__ShouldContainId() {
    class TestEntity {
      @Id
      @Column(name = "id")
      long id;
    }
    // when
    List<Field> fields = jpaEntityExtractor.getMappedFields(TestEntity.class);

    // then
    assertThat(fields).hasSize(1);
  }

  @Test
  void givenEntityContainsUQ__WhenGetColumnsWithoutConstraints__ShouldContainAllColumns() {
    @Table(
        uniqueConstraints =
            @UniqueConstraint(
                name = "test",
                columnNames = {"hello", "world"}))
    class TestEntity {
      String hello;
      String world;
    }
    // when
    List<String> columnNames = jpaEntityExtractor.getUniqueConstraintColumns(TestEntity.class);

    // then
    assertThat(columnNames).doesNotContainSubsequence(":").hasSize(2);
  }

  @Test
  void givenClassHasUQ__WhenGetColumnsWithoutConstraints__ShouldReturnProperly() {
    @Table(uniqueConstraints = @UniqueConstraint(columnNames = {"profile", "name"}))
    class TestEntity {
      @Id @Column long id;
      @Column String profile;
      @Column String name;
      @Column String value;
    }

    // when
    List<String> columns = jpaEntityExtractor.getColumnsWithoutConstraints(TestEntity.class);

    // when
    assertThat(columns).contains("value", "id").hasSize(2);
  }

  @Test
  void givenClassHasATransientField__WhenGetColumnsWithoutConstraints__ShouldExcludeSuchField() {
    // given
    class TestEntity {
      @Transient
      @Column(name = "value")
      String value;
    }
    // when
    List<String> columns = jpaEntityExtractor.getColumnsWithoutConstraints(TestEntity.class);

    // when
    assertThat(columns).isEmpty();
  }

  @Test
  void givenClassHasColumnWithoutName__WhenGetColumnName__ShouldHaveNoBlankColumnName() {
    // given
    class TestEntity {
      @Column String name;
      @JoinColumn String realName;
    }

    // when
    List<String> names = jpaEntityExtractor.getColumnNames(TestEntity.class);

    // then
    assertThat(names).hasSize(2).contains("name", "real_name");
  }

  @Test
  void givenClassHasMappedFields__WhenGetFieldNames__ShouldReturnAllFieldNames() {
    // given
    class TestEntity {
      @Column String first;
      @JoinColumn String second;
      String third;
    }

    // when
    List<String> names = jpaEntityExtractor.getFieldNames(TestEntity.class);

    // then
    assertThat(names).hasSize(2).contains("first", "second");
  }

  @Test
  void givenFieldHasNoColumnAnnotation__WhenGetColumnName__ShouldReturnNull()
      throws NoSuchFieldException {
    // given
    class TestEntity {
      String name;
    }
    Field field = TestEntity.class.getDeclaredField("name");

    // when
    String name = jpaEntityExtractor.getColumnName(field);

    // then
    assertThat(name).isNull();
  }

  @Test
  void givenEntityHasJoinColumn__WhenGetJoinColumnReferencedColumn__ShouldGetProperColumn()
      throws NoSuchFieldException {
    // given
    class TestEntity {
      @Id
      @Column(name = "id")
      Long id;

      @JoinColumn(referencedColumnName = "id")
      TestEntity other;
    }

    Field joinColumnField = TestEntity.class.getDeclaredField("other");

    // when
    String refColName = jpaEntityExtractor.getJoinColumnReferencedColumn(joinColumnField);

    // then
    assertThat(refColName).isEqualTo("id");
  }

  @Test
  void givenEntityHasJoinColumn__WhenGetJoinColumnReferencedTable__ShouldGetProperTable()
      throws NoSuchFieldException {
    // given
    @Table(name = "test_entity")
    class TestEntity {
      @Id
      @Column(name = "id")
      Long id;

      @JoinColumn
      TestEntity other;
    }
    Field joinColumnField = TestEntity.class.getDeclaredField("other");
    // when
    String refTblName = jpaEntityExtractor.getJoinColumnReferencedTable(joinColumnField);

    // then
    assertThat(refTblName).isEqualTo("test_entity");
  }

  @Test
  void givenEntityHasBothColumnsAndJoinColumns__WhenGetPlainColumns__ShouldReturnAsSuch() {
    // given
    class TestEntity {
      @Column
      String first;
      @Column
      String second;
      @JoinColumn
      String third;
      @JoinColumn
      String fourth;
    }

    // when
    List<String> columns = jpaEntityExtractor.getPlainColumns(TestEntity.class);

    // then
    assertThat(columns).hasSize(2).contains("first", "second");
  }

  @Test
  void givenEntityHasBothColumnsAndJoinColumns__WhenGetJoinColumns__ShouldReturnAsSuch() {
    // given
    class TestEntity {
      @Column
      String first;
      @Column
      String second;
      @JoinColumn
      String third;
      @JoinColumn
      String fourth;
    }

    // when
    List<String> columns = jpaEntityExtractor.getJoinColumns(TestEntity.class);

    // then
    assertThat(columns).hasSize(2).contains("third", "fourth");
  }
}
