package io.dsub.discogsdata.batch.query;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.fail;

import io.dsub.discogsdata.common.entity.artist.Artist;
import io.dsub.discogsdata.common.entity.artist.ArtistMember;
import io.dsub.discogsdata.common.entity.base.BaseEntity;
import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

class AbstractJpaEntityQueryBuilderTest {

  @Table(uniqueConstraints = {
      @UniqueConstraint(name = "uniqueName", columnNames = {"idField", "someField"})
  })
  static class TestEntity {

    @Id
    @Column(name = "idField")
    Long idField;

    @GeneratedValue
    Long autoGeneratedField;

    @Id
    @GeneratedValue
    Long autoGeneratedIdField;

    @CreatedDate
    LocalDateTime createdAt;

    @LastModifiedDate
    LocalDateTime lastModifiedAt;

    @Column(name = "someField")
    String someField;

    @Transient
    @Column(name = "transientField")
    String transientField;

    @JoinColumn(name = "joinColumnField")
    TestEntity joinColumnField;
  }

  AbstractJpaEntityQueryBuilder<BaseEntity> queryBuilder;
  Field createdAt;
  Field lastModifiedAt;
  Field columnField;
  Field idField;
  Field transientField;
  Field joinColumnField;
  Field autoGeneratedField;
  Field autoGeneratedIdField;

  @BeforeEach
  void setUp() {
    queryBuilder = new AbstractJpaEntityQueryBuilder<>() {
      @Override
      public String getUpdateSetColumnsAndValues(Class<?> targetClass) {
        return null;
      }

      @Override
      public String getInsertQuery(Class<? extends BaseEntity> targetClass) {
        return null;
      }

      @Override
      public String getUpsertQuery(Class<? extends BaseEntity> targetClass, boolean withId) {
        return null;
      }
    };

    try {
      createdAt = TestEntity.class.getDeclaredField("createdAt");
      lastModifiedAt = TestEntity.class.getDeclaredField("lastModifiedAt");
      columnField = TestEntity.class.getDeclaredField("someField");
      idField = TestEntity.class.getDeclaredField("idField");
      transientField = TestEntity.class.getDeclaredField("transientField");
      joinColumnField = TestEntity.class.getDeclaredField("joinColumnField");
      autoGeneratedField = TestEntity.class.getDeclaredField("autoGeneratedField");
      autoGeneratedIdField = TestEntity.class.getDeclaredField("autoGeneratedIdField");
    } catch (NoSuchFieldException e) {
      fail(e);
    }
  }

  @Test
  void isAutoGeneratedId() {
    assertThat(queryBuilder.isAutoGeneratedId(autoGeneratedField)).isFalse();
    assertThat(queryBuilder.isAutoGeneratedId(autoGeneratedIdField)).isTrue();
    assertThat(queryBuilder.isAutoGeneratedId(idField)).isFalse();
  }

  @Test
  void whenGetFieldStream__ShouldReturnOnlyMappedItemsWithoutIdFields() {
    // when
    List<Field> fields = queryBuilder.getFieldStream(TestEntity.class).collect(Collectors.toList());

    // then
    assertThat(fields)
        .isNotEmpty()
        .doesNotContain(transientField, autoGeneratedField, autoGeneratedIdField)
        .contains(columnField, joinColumnField, idField)
        .hasSize(3);
  }

  @Test
  void whenGetFieldStream__WithIdOptionTrue__ShouldReturnSameAsNonOptionMethod() {
    List<Field> expected = queryBuilder.getFieldStream(TestEntity.class)
        .collect(Collectors.toList());
    List<Field> result = queryBuilder.getFieldStream(TestEntity.class, true)
        .collect(Collectors.toList());
    assertThat(result)
        .hasSameSizeAs(expected)
        .hasSameElementsAs(expected);
  }

  @Test
  void whenGetFieldStream__WithIdOption__ShouldIncludeAllIdFieldsWithColumns() {
    List<Field> result = queryBuilder.getFieldStream(TestEntity.class).collect(Collectors.toList());
    assertThat(result)
        .contains(idField, columnField, joinColumnField)
        .doesNotContain(transientField, autoGeneratedField, autoGeneratedIdField)
        .hasSize(3);
  }

  @Test
  void whenGetTableName__ShouldReturnValidResult() {
    String result = queryBuilder.getTableName(Artist.class);
    String name = Artist.class.getAnnotation(Table.class).name();
    assertThat(result).isEqualTo(name);
  }

  @Test
  void whenIsEntityIdNotManaged__ShouldReturnValidResult() {
    boolean result = queryBuilder.isEntityIdNotManaged(TestEntity.class);
    assertThat(result).isTrue();

    boolean otherResult = queryBuilder.isEntityIdNotManaged(Artist.class);
    assertThat(otherResult).isTrue();

    boolean anotherResult = queryBuilder.isEntityIdNotManaged(ArtistMember.class);
    assertThat(anotherResult).isFalse();
  }

  @Test
  void getValueMappedString__WithIdFalse__ShouldNotContainIdField() {
    String result = queryBuilder.getValueMappedString(TestEntity.class, false);
    assertThat(result)
        .doesNotContain(":idField", ":autoGeneratedIdField")
        .isEqualTo(":someField,:joinColumnField");
  }

  @Test
  void getValueMappedString__WithIdTrue__ShouldContainIdField() {
    String result = queryBuilder.getValueMappedString(TestEntity.class, true);
    assertThat(result)
        .contains(":idField", ":someField", ":joinColumnField")
        .doesNotContain(":autoGeneratedIdField", ":transientField");
  }

  @Test
  void getColumns() {
    List<String> columns = queryBuilder.getColumns(TestEntity.class, false);
    assertThat(columns)
        .contains("someField", "joinColumnField")
        .doesNotContain("idField");
  }

  @Test
  void getUniqueKeys() {
    List<String> uniqueKeys = queryBuilder.getUniqueKeys(TestEntity.class);
    assertThat(uniqueKeys).hasSize(1).contains("uniqueName");
  }

  @Test
  void getIdColumnNames() {
    List<String> idColumnNames = queryBuilder.getIdColumnNames(TestEntity.class);
    assertThat(idColumnNames)
        .hasSize(1)
        .contains("idField");
  }

  @Test
  void getUniqueConstraintsColumns() {
    List<String> uniqueConstraintColumns = queryBuilder
        .getUniqueConstraintsColumns(TestEntity.class);
    assertThat(uniqueConstraintColumns).hasSize(2)
        .contains("idField", "someField");
  }

  @Test
  void getUniqueConstraintsColumnsAndFields() {
    List<String> names = queryBuilder.getUniqueConstraintsColumnsAndFields(TestEntity.class);
    assertThat(names).hasSize(2)
        .contains("idField=:idField", "someField=:someField");
  }

  @Test
  void getUniqueConstraintsAnnotationNames() {
    List<String> names = queryBuilder.getUniqueConstraintsAnnotationNames(TestEntity.class);
    assertThat(names).hasSize(1)
        .contains("uniqueName");
  }

  @Test
  void hasUniqueConstraintAnnotation() {
    assertThat(queryBuilder.hasUniqueConstraintAnnotation(Artist.class)).isFalse();
    assertThat(queryBuilder.hasUniqueConstraintAnnotation(TestEntity.class)).isTrue();
  }

  @Test
  void getColumnName() {
    // when
    String result = queryBuilder.getColumnName(columnField);

    //then
    assertThat(result).isEqualTo("someField");
  }

  @Test
  void getIdColumnAndFields() {
    // when
    Map<String, String> idMap = queryBuilder.getIdColumnAndFields(TestEntity.class);
    // then
    assertThat(idMap).hasSize(1)
        .containsKey("idField");
    assertThat(idMap.get("idField")).isEqualTo("idField");
  }
}