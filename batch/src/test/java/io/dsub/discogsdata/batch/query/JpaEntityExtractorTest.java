package io.dsub.discogsdata.batch.query;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.fail;

import io.dsub.discogsdata.common.entity.artist.Artist;
import io.dsub.discogsdata.common.entity.base.BaseEntity;
import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.junit.jupiter.api.Test;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

class JpaEntityExtractorTest {

  JpaEntityExtractor<BaseEntity> jpaEntityExtractor = new JpaEntityExtractor<>() {
  };

  @Test
  void whenGetTableName__ShouldReturnExactValue() {
    // when
    String name = jpaEntityExtractor.getTableName(TestEntity.class);

    // then
    assertThat(name)
        .isEqualTo(TestEntity.class.getAnnotation(Table.class).name());
  }

  @Test
  void whenIsIdAutoGenerated__ShouldReturnTrue() {
    assertThat(jpaEntityExtractor.isIdAutoGenerated(OtherEntity.class)).isTrue();
  }

  @Test
  void whenIsIdAutoGenerated__ShouldReturnFalse() {
    assertThat(jpaEntityExtractor.isIdAutoGenerated(AnotherEntity.class)).isFalse();
  }

  @Test
  void whenGetLastModifiedAt__ShouldReturnNull() {
    assertThat(jpaEntityExtractor.getLastModifiedField(TestEntity.class)).isNull();
  }

  @Test
  void whenGetLastModifiedAt__WithAnnotation__ShouldReturnField() {
    // when
    Field lastModifiedField = jpaEntityExtractor.getLastModifiedField(Artist.class);

    // then
    assertThat(lastModifiedField).isNotNull();
    assertThat(lastModifiedField.isAnnotationPresent(LastModifiedDate.class)).isTrue();
  }

  @Test
  void whenGetLastModifiedAt__WithoutAnnotation__ShouldReturnField() {
    // when
    Field lastModifiedField = jpaEntityExtractor.getLastModifiedField(OtherEntity.class);

    // then
    assertThat(lastModifiedField).isNotNull();
  }

  @Test
  void whenGetCreatedAt__ShouldReturnNull() {
    assertThat(jpaEntityExtractor.getCreatedAtField(TestEntity.class)).isNull();
  }

  @Test
  void whenGetCreatedAt__WithAnnotation__ShouldReturnField() {
    // when
    Field createdAt = jpaEntityExtractor.getCreatedAtField(Artist.class);

    // then
    assertThat(createdAt.isAnnotationPresent(CreatedDate.class)).isTrue();
    assertThat(createdAt).isNotNull();
  }

  @Test
  void whenGetCreatedAt__WithoutAnnotation__ShouldReturnField() {
    // when
    Field createdAt = jpaEntityExtractor.getCreatedAtField(OtherEntity.class);

    // then
    assertThat(createdAt).isNotNull();
  }

  @Test
  void whenHasUniqueConstraints__ShouldReturnTrue() {
    assertThat(jpaEntityExtractor.hasUniqueConstraints(TestEntity.class)).isTrue();
  }

  @Test
  void whenHasUniqueConstraints__ShouldReturnFalse() {
    assertThat(jpaEntityExtractor.hasUniqueConstraints(OtherEntity.class)).isFalse();
  }

  @Test
  void whenGetFields__ShouldContainParentFields() {
    Field[] parentFields = TestParentEntity.class.getDeclaredFields();

    List<Field> nonTransientFields = Arrays.stream(parentFields)
        .filter(field -> !field.isAnnotationPresent(Transient.class))
        .filter(field -> field.isAnnotationPresent(Column.class))
        .collect(Collectors.toList());

    // when
    List<Field> fields = jpaEntityExtractor.getFields(TestEntity.class);

    // then
    assertThat(fields)
        .containsAll(nonTransientFields);
  }

  @Test
  void whenGetFields__ShouldNotContainAnyTransientFields() {
    Field[] parentFields = TestParentEntity.class.getDeclaredFields();

    List<Field> transientFields = Arrays.stream(parentFields)
        .filter(field -> field.isAnnotationPresent(Transient.class))
        .collect(Collectors.toList());

    Arrays.stream(TestEntity.class.getDeclaredFields())
        .filter(field -> field.isAnnotationPresent(Transient.class))
        .forEach(transientFields::add);

    // when
    List<Field> fields = jpaEntityExtractor.getFields(TestEntity.class);

    // then
    assertThat(fields).doesNotContainAnyElementsOf(transientFields);
  }

  @Test
  void whenGetFields__ShouldAllFieldsContainsColumnAnnotation() {
    // when
    List<Field> fields = jpaEntityExtractor.getFields(TestEntity.class);

    // then
    fields.forEach(field -> {
      if (!field.isAnnotationPresent(Column.class) && !field
          .isAnnotationPresent(JoinColumn.class)) {
        fail("expected all fields to be annotated with column");
      }
    });
  }

  @Test
  void whenGetMappingWithId__ShouldContainId() {
    // when
    Map<String, String> mappings = jpaEntityExtractor.getMappings(TestEntity.class, true);

    // then
    assertThat(mappings)
        .containsKey("id_field")
        .containsValues("idField")
        .doesNotContainValue("autoGeneratedIdField");
  }

  @Test
  void whenGetMappingWithoutId__ShouldNotContainId() {
    // when
    Map<String, String> mappings = jpaEntityExtractor.getMappings(TestEntity.class, false);

    // then
    assertThat(mappings)
        .doesNotContainKeys("id_field")
        .doesNotContainValue("idField");
  }

  @Test
  void whenGetMapping__ShouldContainExactNames() {
    // when
    Map<String, String> mappings = jpaEntityExtractor.getMappings(TestEntity.class, false);

    // then
    assertThat(mappings)
        .containsOnlyKeys("some_field", "other_entity", "join_column_field", "another_entity",
            "field_one")
        .containsValues("anotherEntity", "otherEntity", "joinColumnField", "someField", "fieldOne");
  }

  @Test
  void whenGetUniqueConstraintColumns__ShouldContainAllColumns() {
    // when
    Map<String, String> result = jpaEntityExtractor.getUniqueConstraintColumns(TestEntity.class);

    // then
    assertThat(result).containsOnlyKeys("id_field", "some_field")
        .containsValues("idField", "someField");
  }

  @Test
  void whenGetIdMappings__ShouldOnlyContainIds() {
    // when
    Map<String, String> idMap = jpaEntityExtractor.getIdMappings(TestEntity.class);

    // then
    assertThat(idMap)
        .containsOnlyKeys("id_field")
        .containsValue("idField");
  }

  @Test
  void whenGetMappingsOutsideUniqueConstraints__WithoutId__ShouldExcludeAllColumnsInUniqueConstraints() {
    // when
    Map<String, String> mappings = jpaEntityExtractor
        .getMappingsOutsideUniqueConstraints(TestEntity.class, false);

    // when
    assertThat(mappings)
        .containsOnlyKeys("other_entity", "join_column_field", "another_entity", "field_one")
        .containsValues("anotherEntity", "otherEntity", "joinColumnField", "fieldOne")
        .doesNotContainValue("someField")
        .doesNotContainValue("idField");
  }

  @Test
  void whenGetMappingsOutsideUniqueConstraints__WithId__ShouldExcludeAllColumnsInUniqueConstraints2() {
    // when
    Map<String, String> mappings = jpaEntityExtractor
        .getMappingsOutsideUniqueConstraints(TestEntity.class, true);

    // when
    assertThat(mappings)
        .containsOnlyKeys("other_entity", "join_column_field", "another_entity", "field_one")
        .containsValues("anotherEntity", "otherEntity", "joinColumnField", "fieldOne")
        .doesNotContainValue("someField")
        .doesNotContainValue("idField");
  }

  static class TestParentEntity extends BaseEntity {

    @Column(name = "field_one")
    Long fieldOne;

    @Transient
    @Column(name = "field_two")
    Long fieldTwo;

    @Transient
    Long fieldThree;

    Long fieldWithoutColumn;
  }

  @Table(uniqueConstraints = {
      @UniqueConstraint(name = "unique_key", columnNames = {"id_field", "some_field"})
  })
  static class TestEntity extends TestParentEntity {

    @Id
    @Column(name = "id_field")
    Long idField;

    @GeneratedValue
    Long autoGeneratedField;

    @Id
    @GeneratedValue
    Long autoGeneratedIdField;

    @CreatedDate
    LocalDateTime createdAt;

    @LastModifiedDate
    LocalDateTime lastModifiedAt;

    @Column(name = "some_field")
    String someField;

    @Transient
    @Column(name = "transient_field")
    String transientField;

    @JoinColumn(name = "join_column_field")
    TestEntity joinColumnField;

    @JoinColumn(name = "other_entity", referencedColumnName = "other_entity_id")
    OtherEntity otherEntity;

    @JoinColumn(name = "another_entity")
    OtherEntity anotherEntity;
  }

  @Table(name = "other_entity")
  static class OtherEntity extends BaseEntity {

    @Id
    @GeneratedValue
    @Column(name = "other_entity_id")
    Long id;

    @Column(name = "last_modified_at")
    LocalDateTime lastModifiedAt;

    @Column(name = "created_at")
    LocalDateTime createdAt;
  }

  static class AnotherEntity extends BaseEntity {

    @Id
    @Column(name = "another_entity_id")
    Long id;
  }
}